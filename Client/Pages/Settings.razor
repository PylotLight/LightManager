@page "/Settings"
@using LightManager.Shared
@using LightManager.Shared.Models
@using System.Web
@inject HttpClient Http
@*
	TODO//
	Get matching .torrent and magnet files and list them and download details ready to approve for upload/download
	Collect errors ready for displaying on logs page
	have download progress page with links to any errors.

	get torrent and magnet files to vol1 from *arr
	set location in app to where files are stored so it can read them.
	process the files.
	ability to select episodes/files from each file.


	properties to define - folder location
	where to move torrent files
	RD API key


*@

<PageTitle>Settings</PageTitle>

<h1>Settings</h1>
<EditForm class="container" Model="settings">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div class="form-group">
		<label for="title">Select Torrent Import Folder</label>
		<InputText placeholder="/" @bind-Value="settings.ImportPath" aria-autocomplete="list" class="form-control" />
	</div>

	<div class="row">
		<div class="col">
			<button type="button" @onclick="FolderSave" class="btn btn-success">Save</button>
		</div>
@*		<div class="col">
			<button type="button" @onclick="FolderPicker("")" class="btn btn-danger float-right">Submit</button>
		</div>*@
	</div>

</EditForm>

@if (folderObject == null)
{
	<p><em>Loading...</em></p>
}
else
{
@*	<select>
		@foreach (var value in folderObject.DirectoryObjects)
		{
			<option value=@value.Name>@value.Name</option>
		}
	</select>*@
	<table class="col-md-12 table-bordered table-striped table-condensed cf">
		<tr>
			<th>#</th>
			<th>Folder</th>
		</tr>
		@if (folderObject.DirectoryObjects != null)
		{
			@foreach (var item in folderObject.DirectoryObjects)
			{
				<tr @onclick="@(() => ImportSelection(@item.Path))">

					<td><input type="checkbox" /></td>
					<td>@item.Name</td>

				</tr>
			}}
	</table>
}
@*<input type="file" onchange="selectFolder(event);" webkitdirectory mozdirectory msdirectory odirectory directory multiple="multiple" />*@

<EditForm class="container" Model="settings">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div class="form-group">
		<label for="title">Select Torrent Export Folder</label>
		<InputText placeholder="/" @bind-Value="settings.ExportPath" aria-autocomplete="list" class="form-control" />
	</div>

	<div class="row">
		<div class="col">
			<button type="button" @onclick="FolderSave" class="btn btn-success">Save</button>
		</div>
@*		<div class="col">
			<button type="button" @onclick="FolderPicker" class="btn btn-danger float-right">Submit</button>
		</div>*@
	</div>

</EditForm>

@if (folderObject == null)
{
	<p><em>Loading...</em></p>
}
else
{
@*	<select>
		@foreach (var value in folderObject.DirectoryObjects)
		{
			<option value=@value.Name>@value.Name</option>
		}
	</select>*@
	<table class="col-md-12 table-bordered table-striped table-condensed cf">
		<tr>
			<th>#</th>
			<th>Folder</th>
		</tr>
		@if (folderObject.DirectoryObjects != null)
		{
			@foreach (var item in folderObject.DirectoryObjects)
			{
				<tr @onclick="@(() => ExportSelection(@item.Path))">

					<td><input type="checkbox" /></td>
					<td>@item.Name</td>

				</tr>
			}}
	</table>
}

@code {
	//private string[] logCount = new String[3] { "test", "test2", "test32" };
	//private LogObject logBject;
	//private WeatherForecast[]? forecasts;
	private AppSettings? settings = new AppSettings();
	private FolderObject? folderObject = new FolderObject();
	//private string Path { get; set; } = "/";

	protected override async Task OnInitializedAsync()
	{
		settings = await Http.GetFromJsonAsync<AppSettings>("api/Settings/ReadSettings");
		//Get saved folder first or if empty load root
		if(settings.ImportPath is null){
			settings.ImportPath = "/";
			FolderSave();
		}
		if(settings.ExportPath is null){
			settings.ExportPath = "/";
			FolderSave();
		}
		StateHasChanged();
		FolderPicker("./");
		
	}
	
	private async Task ExportSelection(string path)
	{
		settings.ExportPath = path;

		FolderPicker(settings.ExportPath);
	}

	private async Task ImportSelection(string path)
	{
		settings.ImportPath = path;

		FolderPicker(settings.ImportPath);
	}

	private async Task FolderPicker(string path)
	{
		folderObject = await Http.GetFromJsonAsync<FolderObject>($"api/Settings/GetFolder?Path={HttpUtility.UrlEncode(path)}");
		Console.WriteLine(folderObject);
		StateHasChanged();
	}

	private async Task FolderSave()
	{
		await Http.PostAsJsonAsync<AppSettings>("api/Settings/SaveSettings",settings);
	}

}
