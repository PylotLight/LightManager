@page "/Settings"
@using LightManager.Shared
@using LightManager.Shared.Models
@using System.Web
@using LightManager.Client.Components
@using LightManager.Shared.Services
@inject ISettingsService SettingsService

<PageTitle>Settings</PageTitle>

<h1>Settings</h1>

@if (settings == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<EditForm class="container" Model="settings">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="form-group">
			<label for="title" class="form-label">Select Torrent Import Folder</label>
			<InputText placeholder="/" @bind-Value="settings.ImportPath" aria-autocomplete="list" class="form-control" /><button type="button" @onclick="() => FolderDialogOpen(FolderSelection.Import)"><span class="oi oi-folder" data-glyph="folder"></span></button>
		</div>

		<div class="form-group">
			<label for="title" class="form-label">Select Torrent Export Folder</label>
			<InputText placeholder="/" @bind-Value="settings.ExportPath" aria-autocomplete="list" class="form-control" /><button type="button" @onclick="() => FolderDialogOpen(FolderSelection.Export)"><span class="oi oi-folder" data-glyph="folder"></span></button>
		</div>

		<div class="form-group">
			<label for="title" class="form-label">Export DB Data</label>
			<button type="button" @onclick="() => ExportDB()"><span class="oi oi-data-transfer-download"></span></button>
		</div>
@*
		<div class="form-group form-text">
			<label for="title" class="form-label">RD API Key</label>
			<InputText type="button" @bind-Value=settings.RDAPIKey/><span class="oi oi-folder" data-glyph="folder"></span>
		</div>*@

		@if (FolderDialogIsOpen)
		{
			<FolderBrowser Title="@($"{folderSelection} Directory Selection")"
				   Text=@folderObject.CurrentPath
				   OnClose="@FolderDialogClose">
				@if (folderObject.DirectoryObjects != null)
				{
					<div class="results" style="max-height: 350px; overflow-y: auto;">
						@foreach (var item in folderObject.DirectoryObjects)
						{
							<div class="listItem listItem-border" @onclick="@(() => FolderSelect(@item.Path, folderSelection))">
								<div class=listItemBody style="padding-left: 0;padding-top: .5em;padding-bottom: .5em;">
									<div class=listItemBodyText>
										@item.Name
									</div>
								</div>
							</div>
						}
					</div>
				}
			</FolderBrowser>
		}
	</EditForm>



}

@code {
	private AppSettings? settings = new AppSettings();
	private FolderObject? folderObject = new FolderObject();
	public bool FolderDialogIsOpen { get; set; }
	public enum FolderSelection { Import, Export, }
	private FolderSelection folderSelection { get; set; }


	protected override async Task OnInitializedAsync()
	{
		settings = await SettingsService.ReadSettingsAsync();
	}

	private async Task FolderSelect(string path, FolderSelection folder)
	{
		if (folder == FolderSelection.Import) settings.ImportPath = path;
		if (folder == FolderSelection.Export) settings.ExportPath = path;
		if (folder == FolderSelection.Export) FolderPicker(FolderSelection.Export); else FolderPicker(FolderSelection.Import);
	}

	private async void FolderPicker(FolderSelection selection)
	{
		string? path = selection == FolderSelection.Import ? settings?.ImportPath : settings?.ExportPath;
		folderObject = await SettingsService.ReadFolderObjectAsync(HttpUtility.UrlEncode(path));
		StateHasChanged();
	}

	private async void FolderSave()
	{
		await SettingsService.WriteSettingsAsync(settings);
	}

	private void FolderDialogOpen(FolderSelection selection)
	{
		folderSelection = selection;
		if (selection == FolderSelection.Export) FolderPicker(FolderSelection.Export); else FolderPicker(FolderSelection.Import);
		FolderDialogIsOpen = true;
		StateHasChanged();
	}

	private async Task FolderDialogClose(bool accepted)
	{
		if (accepted)
		{
			FolderSave();
		}

		FolderDialogIsOpen = false;
		folderObject = new FolderObject();
		StateHasChanged();
	}

	private async Task ExportDB(){
		await SettingsService.ExportDBAsync();
	}
}
