@page "/Tasks"
@using LightManager.Shared
@using LightManager.Shared.Models
@using System.Web
@using LightManager.Shared.Services
@inject ITasksService _TasksService 

<PageTitle>Tasks</PageTitle>

<h1>Tasks</h1>

@if (tasks is null)
{
	<p><em>Loading...</em></p>
}
else if (tasks is not null)
{
	<table class="col-md-12 table-bordered table-striped table-condensed cf">
		<tr>
			<th>#</th>
			<th>Description</th>
			<th>Filename</th>
            <th>LastModified</th>
            <th>MagnetLink</th>
		</tr>

		@foreach (var item in tasks)
		{
			<tr>
				<td><input type="checkbox" @bind-value=item.Downloaded/></td>
				<td>@item.Description</td>
				<td>@item.Filename</td>
                <td>@item.LastModified</td>
                <td>@(string.Concat(@item.MagnetLink.Take(20)))</td>
			</tr>
		}
</table>

	<div class="form-group">
        <input type="submit" value="Refresh" @onclick=GetTorrents/>
		<input type="submit" value="Download" @onclick=AddSelectedTorrents/>
        <input type="submit" value="Delete" @onclick=DeleteSelectedTorrents/>
     </div>
}



@code {
    private AppSettings? settings = new AppSettings();
    private List<TaskItem> tasks = new List<TaskItem>();

    protected override async Task OnInitializedAsync()
    {
        tasks = await _TasksService.GetTasks();
    }


    private async Task GetTorrents()
    {
        tasks = await _TasksService.GetTasks();
        StateHasChanged();

    } 
    private async Task DeleteSelectedTorrents()
    {
        await _TasksService.DeleteFiles(tasks);
        await GetTorrents();


    }

    private async Task AddSelectedTorrents()
    {
        await _TasksService.AddTorrents(tasks);
        await GetTorrents();
    }

}
